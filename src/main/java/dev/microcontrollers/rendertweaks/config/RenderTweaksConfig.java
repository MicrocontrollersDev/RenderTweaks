package dev.microcontrollers.rendertweaks.config;

import dev.isxander.yacl3.api.*;
import dev.isxander.yacl3.api.controller.FloatSliderControllerBuilder;
import dev.isxander.yacl3.api.controller.TickBoxControllerBuilder;
import dev.isxander.yacl3.config.v2.api.ConfigClassHandler;
import dev.isxander.yacl3.config.v2.api.SerialEntry;
import dev.isxander.yacl3.config.v2.api.serializer.GsonConfigSerializerBuilder;
import dev.isxander.yacl3.gui.controllers.ColorController;
import net.fabricmc.loader.api.FabricLoader;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.text.Text;

import java.awt.*;

public class RenderTweaksConfig {
    public static final ConfigClassHandler<RenderTweaksConfig> CONFIG = ConfigClassHandler.createBuilder(RenderTweaksConfig.class)
            .serializer(config -> GsonConfigSerializerBuilder.create(config)
                    .setPath(FabricLoader.getInstance().getConfigDir().resolve("rendertweaks.json"))
                    .build())
            .build();

    @SerialEntry public boolean disableLightning = false;
    @SerialEntry public Color lightningColor = new Color(0.45F, 0.45F, 0.5F, 0.3F);
    @SerialEntry public float lightningAlpha = 102;
    @SerialEntry public boolean lightningChroma = false;
    @SerialEntry public float lightningSaturation = 1F;
    @SerialEntry public float lightningBrightness = 1F;
    @SerialEntry public float lightningSpeed = 0.25F;

    @SerialEntry public boolean disableFishingLine = false;
    @SerialEntry public Color fishingLineColor = new Color(-16777216);
    @SerialEntry public float fishingLineAlpha = 102;
    @SerialEntry public boolean fishingLineChroma = false;
    @SerialEntry public float fishingLineSaturation = 1F;
    @SerialEntry public float fishingLineBrightness = 1F;
    @SerialEntry public float fishingLineSpeed = 0.25F;

    @SerialEntry public boolean disableWorldBorderStationary = false;
    @SerialEntry public Color worldBorderStationaryColor = new Color(2138367);
    @SerialEntry public float worldBorderStationaryAlpha = 102;
    @SerialEntry public boolean worldBorderStationaryChroma = false;
    @SerialEntry public float worldBorderStationarySaturation = 1F;
    @SerialEntry public float worldBorderStationaryBrightness = 1F;
    @SerialEntry public float worldBorderStationarySpeed = 0.25F;

    @SerialEntry public boolean disableWorldBorderShrinking = false;
    @SerialEntry public Color worldBorderShrinkingColor = new Color(16724016);
    @SerialEntry public float worldBorderShrinkingAlpha = 102;
    @SerialEntry public boolean worldBorderShrinkingChroma = false;
    @SerialEntry public float worldBorderShrinkingSaturation = 1F;
    @SerialEntry public float worldBorderShrinkingBrightness = 1F;
    @SerialEntry public float worldBorderShrinkingSpeed = 0.25F;

    @SerialEntry public boolean disableWorldBorderGrowing = false;
    @SerialEntry public Color worldBorderGrowingColor = new Color(4259712);
    @SerialEntry public float worldBorderGrowingAlpha = 102;
    @SerialEntry public boolean worldBorderGrowingChroma = false;
    @SerialEntry public float worldBorderGrowingSaturation = 1F;
    @SerialEntry public float worldBorderGrowingBrightness = 1F;
    @SerialEntry public float worldBorderGrowingSpeed = 0.25F;

    @SerialEntry public boolean disableRain = false;
    @SerialEntry public Color rainColor = new Color(1.0F, 1.0F, 1.0F);
    @SerialEntry public float rainAlpha = 102;
    @SerialEntry public boolean rainChroma = false;
    @SerialEntry public float rainSaturation = 1F;
    @SerialEntry public float rainBrightness = 1F;
    @SerialEntry public float rainSpeed = 0.25F;

    @SerialEntry public boolean disableSnow = false;
    @SerialEntry public Color snowColor = new Color(1.0F, 1.0F, 1.0F);
    @SerialEntry public float snowAlpha = 102;
    @SerialEntry public boolean snowChroma = false;
    @SerialEntry public float snowSaturation = 1F;
    @SerialEntry public float snowBrightness = 1F;
    @SerialEntry public float snowSpeed = 0.25F;

    public static Screen configScreen(Screen parent) {
        return YetAnotherConfigLib.create(CONFIG, ((defaults, config, builder) -> builder
                .title(Text.literal("Render Tweaks"))

                // Lightning

                .category(ConfigCategory.createBuilder()
                        .name(Text.literal("Lightning Bolt"))
                        .group(OptionGroup.createBuilder()
                                .name(Text.literal("Lightning Bolt"))
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Disable"))
                                        .description(OptionDescription.of(Text.literal("Completely removes lightning visually.")))
                                        .binding(false, () -> config.disableLightning, newVal -> config.disableLightning = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.literal("Solid Color"))
                                        .description(OptionDescription.of(Text.of("Change the color of lightning bolts.")))
                                        .binding(defaults.lightningColor, () -> config.lightningColor, value -> config.lightningColor = value)
                                        .customController(opt -> new ColorController(opt, true))
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Enable Chroma"))
                                        .description(OptionDescription.of(Text.of("Enables a rainbow/chroma effect. Disregards the solid color provided above.")))
                                        .binding(defaults.lightningChroma, () -> config.lightningChroma, newVal -> config.lightningChroma = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Saturation"))
                                        .description(OptionDescription.of(Text.of("Saturation value for the chroma effect.")))
                                        .binding(1F, () -> config.lightningSaturation, newVal -> config.lightningSaturation = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Brightness"))
                                        .description(OptionDescription.of(Text.of("Brightness value for the chroma effect.")))
                                        .binding(1F, () -> config.lightningBrightness, newVal -> config.lightningBrightness = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Alpha"))
                                        .description(OptionDescription.of(Text.of("Alpha value for the chroma effect.")))
                                        .binding(255F, () -> config.lightningAlpha, newVal -> config.lightningAlpha = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.0f", value)))
                                                .range(0F, 255F)
                                                .step(1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Speed"))
                                        .description(OptionDescription.of(Text.of("Speed value for the chroma effect.")))
                                        .binding(0.25F, () -> config.lightningSpeed, newVal -> config.lightningSpeed = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .build())
                        .build())

                // Fishing Line

                .category(ConfigCategory.createBuilder()
                        .name(Text.literal("Fishing Line"))
                        .group(OptionGroup.createBuilder()
                                .name(Text.literal("Fishing Line"))
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Disable"))
                                        .description(OptionDescription.of(Text.literal("Completely removes fishing lines visually.")))
                                        .binding(false, () -> config.disableFishingLine, newVal -> config.disableFishingLine = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.literal("Solid Color"))
                                        .description(OptionDescription.of(Text.of("Change the color of fishing lines.")))
                                        .binding(defaults.fishingLineColor, () -> config.fishingLineColor, value -> config.fishingLineColor = value)
                                        .customController(opt -> new ColorController(opt, true))
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Enable Chroma"))
                                        .description(OptionDescription.of(Text.of("Enables a rainbow/chroma effect. Disregards the solid color provided above.")))
                                        .binding(defaults.fishingLineChroma, () -> config.fishingLineChroma, newVal -> config.fishingLineChroma = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Saturation"))
                                        .description(OptionDescription.of(Text.of("Saturation value for the chroma effect.")))
                                        .binding(1F, () -> config.fishingLineSaturation, newVal -> config.fishingLineSaturation = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Brightness"))
                                        .description(OptionDescription.of(Text.of("Brightness value for the chroma effect.")))
                                        .binding(1F, () -> config.fishingLineBrightness, newVal -> config.fishingLineBrightness = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Alpha"))
                                        .description(OptionDescription.of(Text.of("Alpha value for the chroma effect.")))
                                        .binding(255F, () -> config.fishingLineAlpha, newVal -> config.fishingLineAlpha = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.0f", value)))
                                                .range(0F, 255F)
                                                .step(1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Speed"))
                                        .description(OptionDescription.of(Text.of("Speed value for the chroma effect.")))
                                        .binding(0.25F, () -> config.fishingLineSpeed, newVal -> config.fishingLineSpeed = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .build())
                        .build())

                // World Border

                .category(ConfigCategory.createBuilder()
                        .name(Text.literal("World Border"))
                        .group(OptionGroup.createBuilder()
                                .name(Text.literal("Stationary"))
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Disable"))
                                        .description(OptionDescription.of(Text.literal("Completely removes stationary world border visually.")))
                                        .binding(false, () -> config.disableWorldBorderStationary, newVal -> config.disableWorldBorderStationary = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.literal("Solid Color"))
                                        .description(OptionDescription.of(Text.of("Change the color of a stationary world border.")))
                                        .binding(defaults.worldBorderStationaryColor, () -> config.worldBorderStationaryColor, value -> config.worldBorderStationaryColor = value)
                                        .customController(opt -> new ColorController(opt, true))
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Enable Chroma"))
                                        .description(OptionDescription.of(Text.of("Enables a rainbow/chroma effect. Disregards the solid color provided above.")))
                                        .binding(defaults.worldBorderStationaryChroma, () -> config.worldBorderStationaryChroma, newVal -> config.worldBorderStationaryChroma = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Saturation"))
                                        .description(OptionDescription.of(Text.of("Saturation value for the chroma effect.")))
                                        .binding(1F, () -> config.worldBorderStationarySaturation, newVal -> config.worldBorderStationarySaturation = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Brightness"))
                                        .description(OptionDescription.of(Text.of("Brightness value for the chroma effect.")))
                                        .binding(1F, () -> config.worldBorderStationaryBrightness, newVal -> config.worldBorderStationaryBrightness = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Alpha"))
                                        .description(OptionDescription.of(Text.of("Alpha value for the chroma effect.")))
                                        .binding(255F, () -> config.worldBorderStationaryAlpha, newVal -> config.worldBorderStationaryAlpha = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.0f", value)))
                                                .range(0F, 255F)
                                                .step(1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Speed"))
                                        .description(OptionDescription.of(Text.of("Speed value for the chroma effect.")))
                                        .binding(0.25F, () -> config.worldBorderStationarySpeed, newVal -> config.worldBorderStationarySpeed = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(Text.literal("Shrinking"))
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Disable"))
                                        .description(OptionDescription.of(Text.literal("Completely removes shrinking world border visually.")))
                                        .binding(false, () -> config.disableWorldBorderShrinking, newVal -> config.disableWorldBorderShrinking = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.literal("Solid Color"))
                                        .description(OptionDescription.of(Text.of("Change the color of a shrinking world border.")))
                                        .binding(defaults.worldBorderShrinkingColor, () -> config.worldBorderShrinkingColor, value -> config.worldBorderShrinkingColor = value)
                                        .customController(opt -> new ColorController(opt, true))
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Enable Chroma"))
                                        .description(OptionDescription.of(Text.of("Enables a rainbow/chroma effect. Disregards the solid color provided above.")))
                                        .binding(defaults.worldBorderShrinkingChroma, () -> config.worldBorderShrinkingChroma, newVal -> config.worldBorderShrinkingChroma = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Saturation"))
                                        .description(OptionDescription.of(Text.of("Saturation value for the chroma effect.")))
                                        .binding(1F, () -> config.worldBorderShrinkingSaturation, newVal -> config.worldBorderShrinkingSaturation = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Brightness"))
                                        .description(OptionDescription.of(Text.of("Brightness value for the chroma effect.")))
                                        .binding(1F, () -> config.worldBorderShrinkingBrightness, newVal -> config.worldBorderShrinkingBrightness = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Alpha"))
                                        .description(OptionDescription.of(Text.of("Alpha value for the chroma effect.")))
                                        .binding(255F, () -> config.worldBorderShrinkingAlpha, newVal -> config.worldBorderShrinkingAlpha = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.0f", value)))
                                                .range(0F, 255F)
                                                .step(1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Speed"))
                                        .description(OptionDescription.of(Text.of("Speed value for the chroma effect.")))
                                        .binding(0.25F, () -> config.worldBorderShrinkingSpeed, newVal -> config.worldBorderShrinkingSpeed = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(Text.literal("Growing"))
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Disable"))
                                        .description(OptionDescription.of(Text.literal("Completely removes growing world border visually.")))
                                        .binding(false, () -> config.disableWorldBorderGrowing, newVal -> config.disableWorldBorderGrowing = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.literal("Solid Color"))
                                        .description(OptionDescription.of(Text.of("Change the color of a growing world border.")))
                                        .binding(defaults.worldBorderGrowingColor, () -> config.worldBorderGrowingColor, value -> config.worldBorderGrowingColor = value)
                                        .customController(opt -> new ColorController(opt, true))
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Enable Chroma"))
                                        .description(OptionDescription.of(Text.of("Enables a rainbow/chroma effect. Disregards the solid color provided above.")))
                                        .binding(defaults.worldBorderGrowingChroma, () -> config.worldBorderGrowingChroma, newVal -> config.worldBorderGrowingChroma = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Saturation"))
                                        .description(OptionDescription.of(Text.of("Saturation value for the chroma effect.")))
                                        .binding(1F, () -> config.worldBorderGrowingSaturation, newVal -> config.worldBorderGrowingSaturation = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Brightness"))
                                        .description(OptionDescription.of(Text.of("Brightness value for the chroma effect.")))
                                        .binding(1F, () -> config.worldBorderGrowingBrightness, newVal -> config.worldBorderGrowingBrightness = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Alpha"))
                                        .description(OptionDescription.of(Text.of("Alpha value for the chroma effect.")))
                                        .binding(255F, () -> config.worldBorderGrowingAlpha, newVal -> config.worldBorderGrowingAlpha = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.0f", value)))
                                                .range(0F, 255F)
                                                .step(1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Speed"))
                                        .description(OptionDescription.of(Text.of("Speed value for the chroma effect.")))
                                        .binding(0.25F, () -> config.worldBorderGrowingSpeed, newVal -> config.worldBorderGrowingSpeed = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .build())
                        .build())

                // Weather
                // TODO: this is more of a multiplier as by default we are at white but obviously, vanilla rain is now white

                .category(ConfigCategory.createBuilder()
                        .name(Text.literal("Weather"))
                        .group(OptionGroup.createBuilder()
                                .name(Text.literal("Rain"))
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Disable"))
                                        .description(OptionDescription.of(Text.literal("Completely removes rain visually.")))
                                        .binding(false, () -> config.disableRain, newVal -> config.disableRain = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.literal("Solid Color"))
                                        .description(OptionDescription.of(Text.of("Change the color of rain.")))
                                        .binding(defaults.rainColor, () -> config.rainColor, value -> config.rainColor = value)
                                        .customController(opt -> new ColorController(opt, true))
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Enable Chroma"))
                                        .description(OptionDescription.of(Text.of("Enables a rainbow/chroma effect. Disregards the solid color provided above.")))
                                        .binding(defaults.rainChroma, () -> config.rainChroma, newVal -> config.rainChroma = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Saturation"))
                                        .description(OptionDescription.of(Text.of("Saturation value for the chroma effect.")))
                                        .binding(1F, () -> config.rainSaturation, newVal -> config.rainSaturation = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Brightness"))
                                        .description(OptionDescription.of(Text.of("Brightness value for the chroma effect.")))
                                        .binding(1F, () -> config.rainBrightness, newVal -> config.rainBrightness = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Alpha"))
                                        .description(OptionDescription.of(Text.of("Alpha value for the chroma effect.")))
                                        .binding(255F, () -> config.rainAlpha, newVal -> config.rainAlpha = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.0f", value)))
                                                .range(0F, 255F)
                                                .step(1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Speed"))
                                        .description(OptionDescription.of(Text.of("Speed value for the chroma effect.")))
                                        .binding(0.25F, () -> config.rainSpeed, newVal -> config.rainSpeed = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(Text.literal("Snow"))
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Disable"))
                                        .description(OptionDescription.of(Text.literal("Completely removes snow visually.")))
                                        .binding(false, () -> config.disableSnow, newVal -> config.disableSnow = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.literal("Solid Color"))
                                        .description(OptionDescription.of(Text.of("Change the color of snow.")))
                                        .binding(defaults.snowColor, () -> config.snowColor, value -> config.snowColor = value)
                                        .customController(opt -> new ColorController(opt, true))
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.literal("Enable Chroma"))
                                        .description(OptionDescription.of(Text.of("Enables a rainbow/chroma effect. Disregards the solid color provided above.")))
                                        .binding(defaults.snowChroma, () -> config.snowChroma, newVal -> config.snowChroma = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Saturation"))
                                        .description(OptionDescription.of(Text.of("Saturation value for the chroma effect.")))
                                        .binding(1F, () -> config.snowSaturation, newVal -> config.snowSaturation = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Brightness"))
                                        .description(OptionDescription.of(Text.of("Brightness value for the chroma effect.")))
                                        .binding(1F, () -> config.snowBrightness, newVal -> config.snowBrightness = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Alpha"))
                                        .description(OptionDescription.of(Text.of("Alpha value for the chroma effect.")))
                                        .binding(255F, () -> config.snowAlpha, newVal -> config.snowAlpha = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.0f", value)))
                                                .range(0F, 255F)
                                                .step(1F))
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.literal("Speed"))
                                        .description(OptionDescription.of(Text.of("Speed value for the chroma effect.")))
                                        .binding(0.25F, () -> config.snowSpeed, newVal -> config.snowSpeed = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .formatValue(value -> Text.of(String.format("%,.1f", value)))
                                                .range(0F, 1F)
                                                .step(0.1F))
                                        .build())
                                .build())
                        .build())
        )).generateScreen(parent);
    }
}
